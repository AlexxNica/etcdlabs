Implement LRU cache

This is mainly to experiment etcd features.

etcd has monotonic global revision, and versions per key.
And impossible to only remove previous versions of a certain key.
Thus, compaction removes all preceding versions, except latest.

Simplest way is putting all data in a single key-value space,
keep track of its version history, and run compaction by revision.
But etcd has request size limit of 1.5 MB.

We can use etcd namespace feature to assign global prefix or
version IDs. And do some range queries to detect cache size, etc.
Also try out some lock APIs.

To make the cache store generic, it receives interface{}.
The cache client should implement encode/decode logic.
e.g. etcdlabs/cluster,backend will encode member status in Protocol Buffer.
