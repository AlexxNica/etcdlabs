// Code generated by protoc-gen-go. DO NOT EDIT.
// source: record/recordpb/recordpb.proto

/*
Package recordpb is a generated protocol buffer package.

It is generated from these files:
	record/recordpb/recordpb.proto

It has these top-level messages:
	Data
	Record
*/
package recordpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Data represents test data.
type Data struct {
	Endpoint      string   `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	ClusterSize   uint32   `protobuf:"varint,2,opt,name=clusterSize" json:"clusterSize,omitempty"`
	Started       string   `protobuf:"bytes,3,opt,name=started" json:"started,omitempty"`
	Current       uint64   `protobuf:"varint,4,opt,name=current" json:"current,omitempty"`
	CurrentFailed uint64   `protobuf:"varint,5,opt,name=currentFailed" json:"currentFailed,omitempty"`
	FailureCases  []string `protobuf:"bytes,6,rep,name=failureCases" json:"failureCases,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Data) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Data) GetClusterSize() uint32 {
	if m != nil {
		return m.ClusterSize
	}
	return 0
}

func (m *Data) GetStarted() string {
	if m != nil {
		return m.Started
	}
	return ""
}

func (m *Data) GetCurrent() uint64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *Data) GetCurrentFailed() uint64 {
	if m != nil {
		return m.CurrentFailed
	}
	return 0
}

func (m *Data) GetFailureCases() []string {
	if m != nil {
		return m.FailureCases
	}
	return nil
}

// Record represents record data.
type Record struct {
	Total    uint64  `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	TestData []*Data `protobuf:"bytes,2,rep,name=testData" json:"testData,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Record) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Record) GetTestData() []*Data {
	if m != nil {
		return m.TestData
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "recordpb.Data")
	proto.RegisterType((*Record)(nil), "recordpb.Record")
}

func init() { proto.RegisterFile("record/recordpb/recordpb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xc9, 0xb6, 0x5b, 0xbb, 0xb3, 0xae, 0x87, 0xe0, 0x61, 0xf0, 0x20, 0xa1, 0x78, 0x08,
	0x1e, 0x56, 0xd0, 0x47, 0x50, 0x3c, 0x78, 0x8c, 0x4f, 0x90, 0x6d, 0x47, 0x28, 0x94, 0xa6, 0x4c,
	0xa6, 0x17, 0x1f, 0xcf, 0x27, 0x93, 0x66, 0x6d, 0x70, 0x4f, 0x99, 0xef, 0xfb, 0xc9, 0xe1, 0xff,
	0xe1, 0x9e, 0xa9, 0x0d, 0xdc, 0x3d, 0x9d, 0x9f, 0xe9, 0x94, 0x8f, 0xe3, 0xc4, 0x41, 0x82, 0xae,
	0x57, 0x6e, 0x7e, 0x14, 0x94, 0x6f, 0x5e, 0xbc, 0xbe, 0x83, 0x9a, 0xc6, 0x6e, 0x0a, 0xfd, 0x28,
	0xa8, 0x8c, 0xb2, 0x3b, 0x97, 0x59, 0x1b, 0xd8, 0xb7, 0xc3, 0x1c, 0x85, 0xf8, 0xb3, 0xff, 0x26,
	0xdc, 0x18, 0x65, 0x0f, 0xee, 0xbf, 0xd2, 0x08, 0x57, 0x51, 0x3c, 0x0b, 0x75, 0x58, 0xa4, 0xcf,
	0x2b, 0x2e, 0x49, 0x3b, 0x33, 0xd3, 0x28, 0x58, 0x1a, 0x65, 0x4b, 0xb7, 0xa2, 0x7e, 0x80, 0xc3,
	0xdf, 0xf9, 0xee, 0xfb, 0x81, 0x3a, 0xdc, 0xa6, 0xfc, 0x52, 0xea, 0x06, 0xae, 0xbf, 0x7c, 0x3f,
	0xcc, 0x4c, 0xaf, 0x3e, 0x52, 0xc4, 0xca, 0x14, 0x76, 0xe7, 0x2e, 0x5c, 0xf3, 0x01, 0x95, 0x4b,
	0x85, 0xf4, 0x2d, 0x6c, 0x25, 0x88, 0x1f, 0x52, 0x85, 0xd2, 0x9d, 0x41, 0x3f, 0x42, 0x2d, 0x14,
	0x65, 0xe9, 0x89, 0x1b, 0x53, 0xd8, 0xfd, 0xf3, 0xcd, 0x31, 0x2f, 0xb2, 0x58, 0x97, 0xf3, 0x53,
	0x95, 0x16, 0x7a, 0xf9, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x07, 0x68, 0x31, 0x43, 0x01, 0x00,
	0x00,
}
